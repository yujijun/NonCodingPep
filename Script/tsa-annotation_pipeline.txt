TSA annotation workflow prior to manual validations
Céline M. Laumont
April 27, 2018

##### Load necessary modules
module add python/2.7.10
module add jellyfish/2.2.3
#####


1. Generation of required annotation files

1.1. fm-indexes # 允许快速字符查询

Generate protein fm-indexes for the canonical normal/cancer proteome (sampleName_personalized_proteome_id_uniqID_reformat.fasta) and the global cancer proteome (sampleName_<LCOUNT>__PPuniqID.fasta) using the following command:

python createFm.py -f <path_to_relevant_fasta> -o <path_to_output_directory>

### full example calls, from base of sample folder (ie: /u/laumontc/tsaPaper/10H005)
python ../scripts/createFm.py -f dbMS/10H005_personalized_proteome_id_150_reformat.fasta -o msRes/annotationFiles/
python ../scripts/createFm.py -f dbMS/10H005_6_PPuniqID.fasta -o msRes/annotationFiles/
###

All parameters can be left to defaults but know that you can use the following keys:
-h: for help
-nbChar: to change the number of character per lines 
         (Default: 70, required for the fm-index to be properly generated)
—noProt: when submitting nucleotide sequences
—noStrand: when working with unstranded nucleotide sequences

The name of the output file will have the following format:
index: <initial_filename>_70char.index
fm-index: <initial_filename>_70char_128-32.fm

### IMPORTANT
 when regenerating a given fm-index, do not forget to delete the intermediate file generated by the fm-index script (<initial_filename>_70char.fasta.bin) before relaunching your command.
###

Of note, for the analysis of human samples, you do not need to generate an fm index for the canonical normal proteome. It can already be found here: /u/laumontc/tsaPaper/mtechuman/annotationFiles/all_tec_mtec_personalized_proteome_id_128_129_130_135_137_139_reformat_70char_128-32.fm




1.2. Personalized transcriptome

Generate the cancer personalized transcriptome using the following command (requires to be in a virtual env. with pyGeno):
python cDNAperso.py -v <version_ref_genome, ex: GRCh38.88> -s <sampleName> -snp <snp_set_name> -qual <snp_quality_threshold, Default: 20> -o <path_to_output_directory>

The name of the output file will have the following format:
- for transcripts with cDNA: <sampleName>_<version_ref_genome>_<snp_set_name>_<qual>.txt (will be used to annotate TSAs)
- for transcript without cDNA: <sampleName>_<version_ref_genome>_<snp_set_name>_<qual>_nocDNA.txt

Of note, both your reference genome and snp set should have been imported in pyGeno using such scripts:
- for the reference genome: /u/laumontc/tsaPaper/refGen/GRCh38_88/importation_GRCh38-88.py
- for sep sets: /u/laumontc/tsaPaper/lc211974vd811T/genomicData/importation_lc2mut.py

For help use: python cDNAperso.py -h




2. TSA annotation

Export the peptide list from capaMHC using the following filters: 
Peptide Score FDR: 0.05
Tick ‘Remove decoy hits’
Length: 8-11
Tick ‘Unique sequence’
NetMHC: NetMHC-4.0
Rank threshold ≤: 2
—> <filename>.csv

Import this peptide list on the server.

Annotate the csv file exported from capaMHC using the following command line:
python mapclassif_HUMAN.py -pep /u/laumontc/tsaPaper/<sampleName>/msRes/<capaMHCfile>.csv -dbFM /u/laumontc/tsaPaper/<sampleName>/msRes/annotationFiles/<initial_filename>_70char_128-32.fm -dbI /u/laumontc/tsaPaper/<sampleName>/msRes/annotationFiles/<initial_filename>_70char.index -ct /u/laumontc/tsaPaper/<sampleName>/contigs/<assembly_folder_name>/assembly_translatedContigs.tab -pt /u/laumontc/tsaPaper/<sampleName>/msRes/annotationFiles/<sampleName>_<version_ref_genome>_<snp_set_name>_<qual>.txt -nFM /u/laumontc/tsaPaper/mtechuman/annotationFiles/all_tec_mtec_personalized_proteome_id_128_129_130_135_137_139_reformat_70char_128-32.fm -cFM /u/laumontc/tsaPaper/<sampleName>/msRes/annotationFiles/<initial_filename>_70char_128-32.fm -nJF /u/laumontc/tsaPaper/mtechuman/genomicData/mtechumanAll.trim.R1rc.24.jf -cJF /u/laumontc/tsaPaper/<sample_name>/genomicData/<jf_db_24> -sgJF /u/laumontc/tsaPaper/dbSNP/genomicData/dbSNP_all_region_GRCh38.88_f23.24.jf -stJF /u/laumontc/tsaPaper/dbSNP/genomicData/dbSNP_coding_region_GRCh38.88_f23.24.jf

For help use: python mapclassif_HUMAN.py -h

Name of the output file: /u/laumontc/tsaPaper/<sampleName>/msRes/<capaMHCfile>_annotated.txt

Prioritize annotated file using the following command line:
python pepPrior.py /u/laumontc/tsaPaper/<sampleName>/msRes/<capaMHCfile>_annotated.txt

Name of the output files:
.yes
.maybeYes
.maybeNo
.ambYes
.ambNo
.excluded



3. Generation of fasta files for subsequent BLAT

Create a txt file containing all peptides in the .yes, .ambYes and .maybeYes files. One peptide sequence per line. 
—> /u/laumontc/tsaPaper/<sampleName>/msRes/tsaCandidates.txt

Create a folder ‘fasta’ in the following folder: /u/laumontc/tsaPaper/<sampleName>/msRes/

Run the following command line:
python getReads.py -tsa /u/laumontc/tsaPaper/<sampleName>/msRes/tsaCandidates.txt -maps /u/laumontc/tsaPaper/<sampleName>/msRes/<capaMHCfile>_annotated.txt -fastq1 /u/laumontc/tsaPaper/<sampleName>/genomicData/<sampleName>_R1.trimmed.paired.fastq.gz -fastq2 /u/laumontc/tsaPaper/<sampleName>/genomicData/<sampleName>_R2.trimmed.paired.fastq.gz -o /u/laumontc/tsaPaper/<sampleName>/msRes/fasta

Of note, possible to use the —notpaired key when submitting fastq files that do not have the same number of lines, such as: /u/laumontc/tsaPaper/<sampleName>/genomicData/<sampleName>_R<1 or 2>.trimmed.unpaired.fastq.gz

You will obtain:
- tsaCandidates_pcrs.txt
- 2 fasta per PCR: one for R1 reads and one fore R2 reads





